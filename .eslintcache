[{"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\index.js":"1","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\app\\App.js":"2","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\header\\index.js":"3","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\register\\index.js":"4","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\login\\index.js":"5","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoList\\index.js":"6","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\privateRoute\\index.js":"7","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\alertBox\\index.js":"8","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\context\\authContext.js":"9","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoList\\data.js":"10","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoItem\\index.js":"11"},{"size":353,"mtime":1612053494960,"results":"12","hashOfConfig":"13"},{"size":635,"mtime":1612053494950,"results":"14","hashOfConfig":"13"},{"size":619,"mtime":1612053494951,"results":"15","hashOfConfig":"13"},{"size":3419,"mtime":1612053494956,"results":"16","hashOfConfig":"13"},{"size":3280,"mtime":1612126089016,"results":"17","hashOfConfig":"13"},{"size":4076,"mtime":1612270380206,"results":"18","hashOfConfig":"13"},{"size":444,"mtime":1612053494954,"results":"19","hashOfConfig":"13"},{"size":722,"mtime":1611935531571,"results":"20","hashOfConfig":"13"},{"size":691,"mtime":1612053494959,"results":"21","hashOfConfig":"13"},{"size":447,"mtime":1612270107276,"results":"22","hashOfConfig":"13"},{"size":1948,"mtime":1612270255558,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"54g64j",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"26"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"26"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\index.js",[],["51","52"],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\app\\App.js",["53"],"import styles from \"./App.module.css\";\nimport Register from \"../register\";\nimport Login from \"../login\";\nimport TodoList from \"../todoList\";\nimport PrivateRoute from \"../privateRoute\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n          <PrivateRoute exact path=\"/\" component={TodoList} />\n          <Route path=\"/register\" component={Register} />\n          <Route path=\"/login\" component={Login} />\n          <Route path=\"/todoList\" component={TodoList} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\header\\index.js",[],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\register\\index.js",["54"],"import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./index.module.css\";\r\nimport Header from \"../header\";\r\nimport AlertBox from \"../alertBox\";\r\nimport { Button, Input } from \"@chakra-ui/react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuthContext } from \"../../context/authContext.js\";\r\n\r\nexport default function Register() {\r\n  const [formData, setFormData] = useState({});\r\n  const [error, setError] = useState();\r\n  const [success, setSuccess] = useState();\r\n  const { user, setAuth } = useAuthContext();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (user._id) {\r\n      history.push(\"/todoList\");\r\n    }\r\n  }, [user]);\r\n\r\n  function handleChange(e) {\r\n    setFormData({ ...formData, [e.target.id]: e.target.value });\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_SERVER_URL}/user/register`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formData),\r\n      }\r\n    );\r\n    const { success, message, user } = await response.json();\r\n    if (success) {\r\n      // Activate a success message, proceed as logged in.\r\n      if (error) setError(false);\r\n      setSuccess(\"You have successfully registered!\");\r\n      setAuth({ type: \"register\", payload: user });\r\n    } else {\r\n      // display a error message\r\n      if (success) setSuccess(false);\r\n      setError(message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <main className={styles.main}>\r\n        {error && (\r\n          <AlertBox\r\n            type=\"error\"\r\n            title=\"Error!\"\r\n            message={error}\r\n            close={setError}\r\n          />\r\n        )}\r\n        {success && (\r\n          <AlertBox\r\n            type=\"success\"\r\n            title=\"Success!\"\r\n            message={success}\r\n            close={setSuccess}\r\n          />\r\n        )}\r\n        <div className={styles.welcomeContainer}>\r\n          <div className={styles.welcomeDiv}>\r\n            <h3>Welcome!</h3>\r\n            <p>Register now for your own personal todo list!</p>\r\n            <p className={styles.loginLink}>\r\n              Already have an account?{\" \"}\r\n              <span>\r\n                <Link to=\"/login\">Log In!</Link>\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className={styles.registerDiv}>\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n              <label htmlFor=\"name\">Name</label>\r\n              <Input\r\n                id=\"name\"\r\n                type=\"text\"\r\n                size=\"md\"\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                size=\"md\"\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                size=\"md\"\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <Button type=\"submit\" colorScheme=\"green\">\r\n                Register\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\login\\index.js",["55"],"import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./index.module.css\";\r\nimport Header from \"../header\";\r\nimport AlertBox from \"../alertBox\";\r\nimport { Button, Input } from \"@chakra-ui/react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useAuthContext } from \"../../context/authContext\";\r\n\r\nexport default function Login() {\r\n  const [formData, setFormData] = useState({});\r\n  const [error, setError] = useState();\r\n  const [success, setSuccess] = useState();\r\n  const { user, setAuth } = useAuthContext();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (user.id) {\r\n      history.push(\"/todoList\");\r\n    }\r\n  }, [user]);\r\n\r\n  function handleChange(e) {\r\n    setFormData({ ...formData, [e.target.id]: e.target.value });\r\n  }\r\n\r\n  async function handleSubmit(e) {\r\n    e.preventDefault();\r\n    console.log(formData);\r\n    const response = await fetch(\r\n      `${process.env.REACT_APP_SERVER_URL}/user/login`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(formData),\r\n      }\r\n    );\r\n    const { success, message, token, user } = await response.json();\r\n    if (success) {\r\n      // Activate a success message, proceed as logged in.\r\n      console.log(response.headers.get(\"auth-token\"));\r\n      localStorage.setItem(\"token\", token);\r\n      setAuth({ type: \"login\", payload: user });\r\n      if (error) setError(false);\r\n      setSuccess(message);\r\n      history.push(\"/todoList\");\r\n    } else {\r\n      // display a error message\r\n      if (success) setSuccess(false);\r\n      setError(message);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <main className={styles.main}>\r\n        {error && (\r\n          <AlertBox\r\n            type=\"error\"\r\n            title=\"Error!\"\r\n            message={error}\r\n            close={setError}\r\n          />\r\n        )}\r\n        {success && (\r\n          <AlertBox\r\n            type=\"success\"\r\n            title=\"Success!\"\r\n            message={success}\r\n            close={setSuccess}\r\n          />\r\n        )}\r\n        <div className={styles.welcomeContainer}>\r\n          <div className={styles.welcomeDiv}>\r\n            <h3>Welcome!</h3>\r\n            <p>Log in now to access your todo list!</p>\r\n            <p className={styles.regLink}>\r\n              Need an account?{\" \"}\r\n              <span>\r\n                <Link to=\"/register\">Register!</Link>\r\n              </span>\r\n            </p>\r\n          </div>\r\n          <div className={styles.registerDiv}>\r\n            <form onSubmit={(e) => handleSubmit(e)}>\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                size=\"md\"\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Input\r\n                id=\"password\"\r\n                type=\"password\"\r\n                size=\"md\"\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <Button type=\"submit\" colorScheme=\"green\">\r\n                Log In\r\n              </Button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoList\\index.js",["56"],"import React, { useState, useEffect } from \"react\";\r\nimport moment from \"moment\";\r\nimport styles from \"./index.module.css\";\r\nimport Header from \"../header\";\r\nimport TodoItem from \"../todoItem\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useAuthContext } from \"../../context/authContext\";\r\nimport { Button, Spinner, Input } from \"@chakra-ui/react\";\r\nimport { listData } from \"./data\";\r\n\r\nexport default function TodoList() {\r\n  const [todos, setTodos] = useState(listData);\r\n  const [todoText, setTodoText] = useState(\"\");\r\n  const { user, setAuth } = useAuthContext();\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    if (!user.name) return logout();\r\n    fetch(process.env.REACT_APP_SERVER_URL + \"/todos\", {\r\n      method: \"GET\",\r\n      headers: {\r\n        authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n      },\r\n    })\r\n      .then((response) => response.json())\r\n      .then((result) => {\r\n        if (!result.success) {\r\n          return logout();\r\n        }\r\n        //setTodos([\"Todos from DB\"]);\r\n      })\r\n      .catch((err) => console.log(err));\r\n  }, []);\r\n\r\n  function handleChange(e) {\r\n    setTodoText(e.target.value);\r\n  }\r\n\r\n  function addTodo() {\r\n    if (!todoText) return;\r\n    setTodos([\r\n      ...todos,\r\n      { content: todoText, completed: false, date: moment().format() },\r\n    ]);\r\n    setTodoText(\"\");\r\n  }\r\n\r\n  function deleteTodo(index) {\r\n    console.log(\"delete todo\", index);\r\n    setTodos([...todos.slice(0, index), ...todos.slice(index + 1)]);\r\n  }\r\n\r\n  function updateTodo(text, index) {\r\n    setTodos([\r\n      ...todos.slice(0, index),\r\n      { ...todos[index], content: text },\r\n      ...todos.slice(index + 1),\r\n    ]);\r\n  }\r\n\r\n  function toggleCompleted(index) {\r\n    console.log(\"toggle\", index);\r\n    setTodos([\r\n      ...todos.slice(0, index),\r\n      { ...todos[index], completed: !todos[index].completed },\r\n      ...todos.slice(index + 1),\r\n    ]);\r\n  }\r\n\r\n  function logout() {\r\n    localStorage.setItem(\"token\", \"\");\r\n    setAuth({ type: \"logout\" });\r\n    history.push(\"/login\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <main className={styles.main}>\r\n        <div className={styles.container}>\r\n          <div className={styles.addTodoDiv}>\r\n            <div className={styles.date}>\r\n              <p>{moment().format(\"dddd\")}</p>\r\n              <p>{moment().format(\"Do MMMM YYYY\")}</p>\r\n            </div>\r\n            <div className={styles.input}>\r\n              <Input\r\n                placeholder=\"Enter a todo\"\r\n                value={todoText}\r\n                style={{\r\n                  borderTopRightRadius: \"0\",\r\n                  borderBottomRightRadius: \"0\",\r\n                  borderColor: \"#999\",\r\n                }}\r\n                onChange={(e) => handleChange(e)}\r\n              />\r\n              <Button\r\n                colorScheme=\"teal\"\r\n                style={{\r\n                  borderTopLeftRadius: \"0\",\r\n                  borderBottomLeftRadius: \"0\",\r\n                }}\r\n                onClick={addTodo}\r\n              >\r\n                Add To List\r\n              </Button>\r\n            </div>\r\n          </div>\r\n          <div className={styles.todoListDiv}>\r\n            {todos.map((item, i) => {\r\n              return (\r\n                <TodoItem\r\n                  key={i}\r\n                  item={item}\r\n                  i={i}\r\n                  del={deleteTodo}\r\n                  update={updateTodo}\r\n                  toggle={toggleCompleted}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n        {!user.id && (\r\n          <Spinner\r\n            thickness=\"4px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"blue.500\"\r\n            size=\"xl\"\r\n          />\r\n        )}\r\n        {user.id && (\r\n          <div className={styles.devInfo}>\r\n            <pre>{JSON.stringify(user)}</pre>\r\n            <Button colorScheme=\"red\" size=\"sm\" onClick={logout}>\r\n              Log Out\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\privateRoute\\index.js",[],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\alertBox\\index.js",[],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\context\\authContext.js",[],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoList\\data.js",[],"C:\\Users\\jimuk\\Desktop\\SOC Staging\\theTodoProject\\todo-client\\src\\components\\todoItem\\index.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":8,"nodeType":"63","messageId":"64","endLine":1,"endColumn":14},{"ruleId":"65","severity":1,"message":"66","line":20,"column":6,"nodeType":"67","endLine":20,"endColumn":12,"suggestions":"68"},{"ruleId":"65","severity":1,"message":"66","line":20,"column":6,"nodeType":"67","endLine":20,"endColumn":12,"suggestions":"69"},{"ruleId":"65","severity":1,"message":"70","line":33,"column":6,"nodeType":"67","endLine":33,"endColumn":8,"suggestions":"71"},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],"no-unused-vars","'styles' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["74"],["75"],"React Hook useEffect has missing dependencies: 'logout' and 'user.name'. Either include them or remove the dependency array.",["76"],"no-global-assign","no-unsafe-negation",{"desc":"77","fix":"78"},{"desc":"77","fix":"79"},{"desc":"80","fix":"81"},"Update the dependencies array to be: [history, user]",{"range":"82","text":"83"},{"range":"84","text":"83"},"Update the dependencies array to be: [logout, user.name]",{"range":"85","text":"86"},[679,685],"[history, user]",[672,678],[1101,1103],"[logout, user.name]"]